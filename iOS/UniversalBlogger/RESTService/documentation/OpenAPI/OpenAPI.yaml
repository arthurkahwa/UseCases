openapi: 3.0.3
info:
  title: UniversalBlogger REST API
  description: |-
    UniversalBlogger REST API. 
    This meant to be the only interface to the backing database. All data is retrieved and entered here.
  contact:
    email: arthur_kahwa@chapter.de
  version: 1.0.0

servers:
  - url: 'http://localhost:8080/api'
tags:
  - name: user
    description: The user who wrote the posts
  - name: post
    description: The posts created by the user
paths:
  /user:
    post:
      tags:
        - user
      summary: create a single user
      description: Creates an entry for a single user in the database
      operationId: createSingleUser
      requestBody:
        description: create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      tags:
        - user
      summary: Get single user
      description: Get the details to a single user by user id
      operationId: getSingleUser
      parameters:
        - name: id
          in: path
          description: ID of user to find
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      summary: Update single user
      description: Update the details to a single user by user id
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: ID of user to find
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: delete single user
      description: Delete a single user by user id
      operationId: deleteSingleUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successfully deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/post/{id}:
    get:
      tags:
        - user
      summary: get a single user with  their posts
      description: Get an entry for a single user with posts
      operationId: getSingleUserWithPosts
      parameters:
        - name: id
          in: path
          description: ID of user to find
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successfully derived user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
  /users:
    post:
      tags:
        - user
      summary: create a group of users
      description: Creates a group of entries for singles user in the database
      operationId: createMultipleUsers
      requestBody:
        description: create user objects
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        default:
          description: successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags:
        - user
      summary: Get a group of users
      description: Get a group of entries for singles user in the database
      operationId: getAllUsers
      responses:
        default:
          description: successfully found user group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/posts:
    get:
      tags:
        - user
      summary: Get a group of users with posts
      description: Get a group of entries for users and their posts
      operationId: getAllUsersAndPosts
      responses:
        default:
          description: successfully found user group and posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPost'
  /post:
    post:
      tags:
        - post
      summary: create a single post
      description: Creates an entry for a single post in the database
      operationId: createSinglePost
      requestBody:
        description: create post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        default:
          description: successfully created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /post/{id}:
    get:
      tags:
        - post
      summary: Get single post
      description: Get the details to a single post by user id
      operationId: getSinglePost
      parameters:
        - name: id
          in: path
          description: ID of post to find
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successfully found post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - post
      summary: Update single post
      description: Update the details to a single post by id
      operationId: updatePostById
      parameters:
        - name: id
          in: path
          description: ID of post to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successfully updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      tags:
        - post
      summary: delete single user
      description: Delete a single post by id
      operationId: deleteSinglePost
      parameters:
        - name: id
          in: path
          description: ID of post to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successfully deleted post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        username:
          type: string
          example: nameOfUser
        email:
          type: string
          example: user@mail.local
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        title:
          type: string
          example: 'Example post title'
        body:
          type: string
          example: 'Example post body'
    UserPost:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        username:
          type: string
          example: nameOfUser
        email:
          type: string
          example: user@mail.local
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
